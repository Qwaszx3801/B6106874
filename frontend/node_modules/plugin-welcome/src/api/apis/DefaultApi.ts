/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersScholarship,
    ControllersScholarshipFromJSON,
    ControllersScholarshipToJSON,
    EntEducationlevel,
    EntEducationlevelFromJSON,
    EntEducationlevelToJSON,
    EntScholarship,
    EntScholarshipFromJSON,
    EntScholarshipToJSON,
    EntScholarshiptype,
    EntScholarshiptypeFromJSON,
    EntScholarshiptypeToJSON,
    EntSemester,
    EntSemesterFromJSON,
    EntSemesterToJSON,
    EntStudyplan,
    EntStudyplanFromJSON,
    EntStudyplanToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateScholarshipRequest {
    scholarship: ControllersScholarship;
}

export interface GetEducationlevelRequest {
    id: number;
}

export interface GetScholarshipRequest {
    id: number;
}

export interface GetScholarshiptypeRequest {
    id: number;
}

export interface GetSemesterRequest {
    id: number;
}

export interface GetStudyplanRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListEducationlevelRequest {
    limit?: number;
    offset?: number;
}

export interface ListScholarshipRequest {
    limit?: number;
    offset?: number;
}

export interface ListScholarshiptypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListSemesterRequest {
    limit?: number;
    offset?: number;
}

export interface ListStudyplanRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create scholarship
     * Create scholarship
     */
    async createScholarshipRaw(requestParameters: CreateScholarshipRequest): Promise<runtime.ApiResponse<EntScholarship>> {
        if (requestParameters.scholarship === null || requestParameters.scholarship === undefined) {
            throw new runtime.RequiredError('scholarship','Required parameter requestParameters.scholarship was null or undefined when calling createScholarship.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/scholarships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersScholarshipToJSON(requestParameters.scholarship),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshipFromJSON(jsonValue));
    }

    /**
     * Create scholarship
     * Create scholarship
     */
    async createScholarship(requestParameters: CreateScholarshipRequest): Promise<EntScholarship> {
        const response = await this.createScholarshipRaw(requestParameters);
        return await response.value();
    }

    /**
     * get educationlevel by ID
     * Get a educationlevel entity by ID
     */
    async getEducationlevelRaw(requestParameters: GetEducationlevelRequest): Promise<runtime.ApiResponse<EntEducationlevel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEducationlevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educationlevels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEducationlevelFromJSON(jsonValue));
    }

    /**
     * get educationlevel by ID
     * Get a educationlevel entity by ID
     */
    async getEducationlevel(requestParameters: GetEducationlevelRequest): Promise<EntEducationlevel> {
        const response = await this.getEducationlevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get scholarship by ID
     * Get a scholarship entity by ID
     */
    async getScholarshipRaw(requestParameters: GetScholarshipRequest): Promise<runtime.ApiResponse<EntScholarship>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getScholarship.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarships/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshipFromJSON(jsonValue));
    }

    /**
     * get scholarship by ID
     * Get a scholarship entity by ID
     */
    async getScholarship(requestParameters: GetScholarshipRequest): Promise<EntScholarship> {
        const response = await this.getScholarshipRaw(requestParameters);
        return await response.value();
    }

    /**
     * get scholarshiptype by ID
     * Get a scholarshiptype entity by ID
     */
    async getScholarshiptypeRaw(requestParameters: GetScholarshiptypeRequest): Promise<runtime.ApiResponse<EntScholarshiptype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getScholarshiptype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarshiptypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntScholarshiptypeFromJSON(jsonValue));
    }

    /**
     * get scholarshiptype by ID
     * Get a scholarshiptype entity by ID
     */
    async getScholarshiptype(requestParameters: GetScholarshiptypeRequest): Promise<EntScholarshiptype> {
        const response = await this.getScholarshiptypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get semester by ID
     * Get a semester entity by ID
     */
    async getSemesterRaw(requestParameters: GetSemesterRequest): Promise<runtime.ApiResponse<EntSemester>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSemester.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/semesters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSemesterFromJSON(jsonValue));
    }

    /**
     * get semester by ID
     * Get a semester entity by ID
     */
    async getSemester(requestParameters: GetSemesterRequest): Promise<EntSemester> {
        const response = await this.getSemesterRaw(requestParameters);
        return await response.value();
    }

    /**
     * get studyplan by ID
     * Get a studyplan entity by ID
     */
    async getStudyplanRaw(requestParameters: GetStudyplanRequest): Promise<runtime.ApiResponse<EntStudyplan>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStudyplan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studyplans/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStudyplanFromJSON(jsonValue));
    }

    /**
     * get studyplan by ID
     * Get a studyplan entity by ID
     */
    async getStudyplan(requestParameters: GetStudyplanRequest): Promise<EntStudyplan> {
        const response = await this.getStudyplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list educationlevel entities
     * List educationlevel entities
     */
    async listEducationlevelRaw(requestParameters: ListEducationlevelRequest): Promise<runtime.ApiResponse<Array<EntEducationlevel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educationlevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEducationlevelFromJSON));
    }

    /**
     * list educationlevel entities
     * List educationlevel entities
     */
    async listEducationlevel(requestParameters: ListEducationlevelRequest): Promise<Array<EntEducationlevel>> {
        const response = await this.listEducationlevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * list scholarship entities
     * List scholarship entities
     */
    async listScholarshipRaw(requestParameters: ListScholarshipRequest): Promise<runtime.ApiResponse<Array<EntScholarship>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntScholarshipFromJSON));
    }

    /**
     * list scholarship entities
     * List scholarship entities
     */
    async listScholarship(requestParameters: ListScholarshipRequest): Promise<Array<EntScholarship>> {
        const response = await this.listScholarshipRaw(requestParameters);
        return await response.value();
    }

    /**
     * list scholarshiptype entities
     * List scholarshiptype entities
     */
    async listScholarshiptypeRaw(requestParameters: ListScholarshiptypeRequest): Promise<runtime.ApiResponse<Array<EntScholarshiptype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scholarshiptypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntScholarshiptypeFromJSON));
    }

    /**
     * list scholarshiptype entities
     * List scholarshiptype entities
     */
    async listScholarshiptype(requestParameters: ListScholarshiptypeRequest): Promise<Array<EntScholarshiptype>> {
        const response = await this.listScholarshiptypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list semester entities
     * List semester entities
     */
    async listSemesterRaw(requestParameters: ListSemesterRequest): Promise<runtime.ApiResponse<Array<EntSemester>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/semesters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSemesterFromJSON));
    }

    /**
     * list semester entities
     * List semester entities
     */
    async listSemester(requestParameters: ListSemesterRequest): Promise<Array<EntSemester>> {
        const response = await this.listSemesterRaw(requestParameters);
        return await response.value();
    }

    /**
     * list studyplan entities
     * List studyplan entities
     */
    async listStudyplanRaw(requestParameters: ListStudyplanRequest): Promise<runtime.ApiResponse<Array<EntStudyplan>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/studyplans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStudyplanFromJSON));
    }

    /**
     * list studyplan entities
     * List studyplan entities
     */
    async listStudyplan(requestParameters: ListStudyplanRequest): Promise<Array<EntStudyplan>> {
        const response = await this.listStudyplanRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

}
