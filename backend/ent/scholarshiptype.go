// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Varissara/app/ent/scholarshiptype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Scholarshiptype is the model entity for the Scholarshiptype schema.
type Scholarshiptype struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Scholarshiptypename holds the value of the "Scholarshiptypename" field.
	Scholarshiptypename string `json:"Scholarshiptypename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScholarshiptypeQuery when eager-loading is set.
	Edges ScholarshiptypeEdges `json:"edges"`
}

// ScholarshiptypeEdges holds the relations/edges for other nodes in the graph.
type ScholarshiptypeEdges struct {
	// ScholarshiptypeID holds the value of the ScholarshiptypeID edge.
	ScholarshiptypeID []*Scholarship
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScholarshiptypeIDOrErr returns the ScholarshiptypeID value or an error if the edge
// was not loaded in eager-loading.
func (e ScholarshiptypeEdges) ScholarshiptypeIDOrErr() ([]*Scholarship, error) {
	if e.loadedTypes[0] {
		return e.ScholarshiptypeID, nil
	}
	return nil, &NotLoadedError{edge: "ScholarshiptypeID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scholarshiptype) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Scholarshiptypename
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scholarshiptype fields.
func (s *Scholarshiptype) assignValues(values ...interface{}) error {
	if m, n := len(values), len(scholarshiptype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Scholarshiptypename", values[0])
	} else if value.Valid {
		s.Scholarshiptypename = value.String
	}
	return nil
}

// QueryScholarshiptypeID queries the ScholarshiptypeID edge of the Scholarshiptype.
func (s *Scholarshiptype) QueryScholarshiptypeID() *ScholarshipQuery {
	return (&ScholarshiptypeClient{config: s.config}).QueryScholarshiptypeID(s)
}

// Update returns a builder for updating this Scholarshiptype.
// Note that, you need to call Scholarshiptype.Unwrap() before calling this method, if this Scholarshiptype
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scholarshiptype) Update() *ScholarshiptypeUpdateOne {
	return (&ScholarshiptypeClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Scholarshiptype) Unwrap() *Scholarshiptype {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scholarshiptype is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scholarshiptype) String() string {
	var builder strings.Builder
	builder.WriteString("Scholarshiptype(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", Scholarshiptypename=")
	builder.WriteString(s.Scholarshiptypename)
	builder.WriteByte(')')
	return builder.String()
}

// Scholarshiptypes is a parsable slice of Scholarshiptype.
type Scholarshiptypes []*Scholarshiptype

func (s Scholarshiptypes) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
