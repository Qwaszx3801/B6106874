// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Varissara/app/ent/migrate"

	"github.com/Varissara/app/ent/educationlevel"
	"github.com/Varissara/app/ent/scholarship"
	"github.com/Varissara/app/ent/scholarshiptype"
	"github.com/Varissara/app/ent/semester"
	"github.com/Varissara/app/ent/studyplan"
	"github.com/Varissara/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Educationlevel is the client for interacting with the Educationlevel builders.
	Educationlevel *EducationlevelClient
	// Scholarship is the client for interacting with the Scholarship builders.
	Scholarship *ScholarshipClient
	// Scholarshiptype is the client for interacting with the Scholarshiptype builders.
	Scholarshiptype *ScholarshiptypeClient
	// Semester is the client for interacting with the Semester builders.
	Semester *SemesterClient
	// Studyplan is the client for interacting with the Studyplan builders.
	Studyplan *StudyplanClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Educationlevel = NewEducationlevelClient(c.config)
	c.Scholarship = NewScholarshipClient(c.config)
	c.Scholarshiptype = NewScholarshiptypeClient(c.config)
	c.Semester = NewSemesterClient(c.config)
	c.Studyplan = NewStudyplanClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Educationlevel:  NewEducationlevelClient(cfg),
		Scholarship:     NewScholarshipClient(cfg),
		Scholarshiptype: NewScholarshiptypeClient(cfg),
		Semester:        NewSemesterClient(cfg),
		Studyplan:       NewStudyplanClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		Educationlevel:  NewEducationlevelClient(cfg),
		Scholarship:     NewScholarshipClient(cfg),
		Scholarshiptype: NewScholarshiptypeClient(cfg),
		Semester:        NewSemesterClient(cfg),
		Studyplan:       NewStudyplanClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Educationlevel.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Educationlevel.Use(hooks...)
	c.Scholarship.Use(hooks...)
	c.Scholarshiptype.Use(hooks...)
	c.Semester.Use(hooks...)
	c.Studyplan.Use(hooks...)
	c.User.Use(hooks...)
}

// EducationlevelClient is a client for the Educationlevel schema.
type EducationlevelClient struct {
	config
}

// NewEducationlevelClient returns a client for the Educationlevel from the given config.
func NewEducationlevelClient(c config) *EducationlevelClient {
	return &EducationlevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `educationlevel.Hooks(f(g(h())))`.
func (c *EducationlevelClient) Use(hooks ...Hook) {
	c.hooks.Educationlevel = append(c.hooks.Educationlevel, hooks...)
}

// Create returns a create builder for Educationlevel.
func (c *EducationlevelClient) Create() *EducationlevelCreate {
	mutation := newEducationlevelMutation(c.config, OpCreate)
	return &EducationlevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Educationlevel.
func (c *EducationlevelClient) Update() *EducationlevelUpdate {
	mutation := newEducationlevelMutation(c.config, OpUpdate)
	return &EducationlevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationlevelClient) UpdateOne(e *Educationlevel) *EducationlevelUpdateOne {
	mutation := newEducationlevelMutation(c.config, OpUpdateOne, withEducationlevel(e))
	return &EducationlevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationlevelClient) UpdateOneID(id int) *EducationlevelUpdateOne {
	mutation := newEducationlevelMutation(c.config, OpUpdateOne, withEducationlevelID(id))
	return &EducationlevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Educationlevel.
func (c *EducationlevelClient) Delete() *EducationlevelDelete {
	mutation := newEducationlevelMutation(c.config, OpDelete)
	return &EducationlevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EducationlevelClient) DeleteOne(e *Educationlevel) *EducationlevelDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EducationlevelClient) DeleteOneID(id int) *EducationlevelDeleteOne {
	builder := c.Delete().Where(educationlevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationlevelDeleteOne{builder}
}

// Create returns a query builder for Educationlevel.
func (c *EducationlevelClient) Query() *EducationlevelQuery {
	return &EducationlevelQuery{config: c.config}
}

// Get returns a Educationlevel entity by its id.
func (c *EducationlevelClient) Get(ctx context.Context, id int) (*Educationlevel, error) {
	return c.Query().Where(educationlevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationlevelClient) GetX(ctx context.Context, id int) *Educationlevel {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryEducationlevelID queries the EducationlevelID edge of a Educationlevel.
func (c *EducationlevelClient) QueryEducationlevelID(e *Educationlevel) *ScholarshipQuery {
	query := &ScholarshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(educationlevel.Table, educationlevel.FieldID, id),
			sqlgraph.To(scholarship.Table, scholarship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, educationlevel.EducationlevelIDTable, educationlevel.EducationlevelIDColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationlevelClient) Hooks() []Hook {
	return c.hooks.Educationlevel
}

// ScholarshipClient is a client for the Scholarship schema.
type ScholarshipClient struct {
	config
}

// NewScholarshipClient returns a client for the Scholarship from the given config.
func NewScholarshipClient(c config) *ScholarshipClient {
	return &ScholarshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scholarship.Hooks(f(g(h())))`.
func (c *ScholarshipClient) Use(hooks ...Hook) {
	c.hooks.Scholarship = append(c.hooks.Scholarship, hooks...)
}

// Create returns a create builder for Scholarship.
func (c *ScholarshipClient) Create() *ScholarshipCreate {
	mutation := newScholarshipMutation(c.config, OpCreate)
	return &ScholarshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Scholarship.
func (c *ScholarshipClient) Update() *ScholarshipUpdate {
	mutation := newScholarshipMutation(c.config, OpUpdate)
	return &ScholarshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScholarshipClient) UpdateOne(s *Scholarship) *ScholarshipUpdateOne {
	mutation := newScholarshipMutation(c.config, OpUpdateOne, withScholarship(s))
	return &ScholarshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScholarshipClient) UpdateOneID(id int) *ScholarshipUpdateOne {
	mutation := newScholarshipMutation(c.config, OpUpdateOne, withScholarshipID(id))
	return &ScholarshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scholarship.
func (c *ScholarshipClient) Delete() *ScholarshipDelete {
	mutation := newScholarshipMutation(c.config, OpDelete)
	return &ScholarshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScholarshipClient) DeleteOne(s *Scholarship) *ScholarshipDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScholarshipClient) DeleteOneID(id int) *ScholarshipDeleteOne {
	builder := c.Delete().Where(scholarship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScholarshipDeleteOne{builder}
}

// Create returns a query builder for Scholarship.
func (c *ScholarshipClient) Query() *ScholarshipQuery {
	return &ScholarshipQuery{config: c.config}
}

// Get returns a Scholarship entity by its id.
func (c *ScholarshipClient) Get(ctx context.Context, id int) (*Scholarship, error) {
	return c.Query().Where(scholarship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScholarshipClient) GetX(ctx context.Context, id int) *Scholarship {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryScholarshiptypeID queries the ScholarshiptypeID edge of a Scholarship.
func (c *ScholarshipClient) QueryScholarshiptypeID(s *Scholarship) *ScholarshiptypeQuery {
	query := &ScholarshiptypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarship.Table, scholarship.FieldID, id),
			sqlgraph.To(scholarshiptype.Table, scholarshiptype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarship.ScholarshiptypeIDTable, scholarship.ScholarshiptypeIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducationlevelID queries the EducationlevelID edge of a Scholarship.
func (c *ScholarshipClient) QueryEducationlevelID(s *Scholarship) *EducationlevelQuery {
	query := &EducationlevelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarship.Table, scholarship.FieldID, id),
			sqlgraph.To(educationlevel.Table, educationlevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarship.EducationlevelIDTable, scholarship.EducationlevelIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStudyplanID queries the StudyplanID edge of a Scholarship.
func (c *ScholarshipClient) QueryStudyplanID(s *Scholarship) *StudyplanQuery {
	query := &StudyplanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarship.Table, scholarship.FieldID, id),
			sqlgraph.To(studyplan.Table, studyplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarship.StudyplanIDTable, scholarship.StudyplanIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySemesterID queries the SemesterID edge of a Scholarship.
func (c *ScholarshipClient) QuerySemesterID(s *Scholarship) *SemesterQuery {
	query := &SemesterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarship.Table, scholarship.FieldID, id),
			sqlgraph.To(semester.Table, semester.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarship.SemesterIDTable, scholarship.SemesterIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserID queries the UserID edge of a Scholarship.
func (c *ScholarshipClient) QueryUserID(s *Scholarship) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarship.Table, scholarship.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scholarship.UserIDTable, scholarship.UserIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScholarshipClient) Hooks() []Hook {
	return c.hooks.Scholarship
}

// ScholarshiptypeClient is a client for the Scholarshiptype schema.
type ScholarshiptypeClient struct {
	config
}

// NewScholarshiptypeClient returns a client for the Scholarshiptype from the given config.
func NewScholarshiptypeClient(c config) *ScholarshiptypeClient {
	return &ScholarshiptypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scholarshiptype.Hooks(f(g(h())))`.
func (c *ScholarshiptypeClient) Use(hooks ...Hook) {
	c.hooks.Scholarshiptype = append(c.hooks.Scholarshiptype, hooks...)
}

// Create returns a create builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Create() *ScholarshiptypeCreate {
	mutation := newScholarshiptypeMutation(c.config, OpCreate)
	return &ScholarshiptypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Update() *ScholarshiptypeUpdate {
	mutation := newScholarshiptypeMutation(c.config, OpUpdate)
	return &ScholarshiptypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScholarshiptypeClient) UpdateOne(s *Scholarshiptype) *ScholarshiptypeUpdateOne {
	mutation := newScholarshiptypeMutation(c.config, OpUpdateOne, withScholarshiptype(s))
	return &ScholarshiptypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScholarshiptypeClient) UpdateOneID(id int) *ScholarshiptypeUpdateOne {
	mutation := newScholarshiptypeMutation(c.config, OpUpdateOne, withScholarshiptypeID(id))
	return &ScholarshiptypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Delete() *ScholarshiptypeDelete {
	mutation := newScholarshiptypeMutation(c.config, OpDelete)
	return &ScholarshiptypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScholarshiptypeClient) DeleteOne(s *Scholarshiptype) *ScholarshiptypeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScholarshiptypeClient) DeleteOneID(id int) *ScholarshiptypeDeleteOne {
	builder := c.Delete().Where(scholarshiptype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScholarshiptypeDeleteOne{builder}
}

// Create returns a query builder for Scholarshiptype.
func (c *ScholarshiptypeClient) Query() *ScholarshiptypeQuery {
	return &ScholarshiptypeQuery{config: c.config}
}

// Get returns a Scholarshiptype entity by its id.
func (c *ScholarshiptypeClient) Get(ctx context.Context, id int) (*Scholarshiptype, error) {
	return c.Query().Where(scholarshiptype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScholarshiptypeClient) GetX(ctx context.Context, id int) *Scholarshiptype {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryScholarshiptypeID queries the ScholarshiptypeID edge of a Scholarshiptype.
func (c *ScholarshiptypeClient) QueryScholarshiptypeID(s *Scholarshiptype) *ScholarshipQuery {
	query := &ScholarshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarshiptype.Table, scholarshiptype.FieldID, id),
			sqlgraph.To(scholarship.Table, scholarship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scholarshiptype.ScholarshiptypeIDTable, scholarshiptype.ScholarshiptypeIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScholarshiptypeClient) Hooks() []Hook {
	return c.hooks.Scholarshiptype
}

// SemesterClient is a client for the Semester schema.
type SemesterClient struct {
	config
}

// NewSemesterClient returns a client for the Semester from the given config.
func NewSemesterClient(c config) *SemesterClient {
	return &SemesterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `semester.Hooks(f(g(h())))`.
func (c *SemesterClient) Use(hooks ...Hook) {
	c.hooks.Semester = append(c.hooks.Semester, hooks...)
}

// Create returns a create builder for Semester.
func (c *SemesterClient) Create() *SemesterCreate {
	mutation := newSemesterMutation(c.config, OpCreate)
	return &SemesterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Semester.
func (c *SemesterClient) Update() *SemesterUpdate {
	mutation := newSemesterMutation(c.config, OpUpdate)
	return &SemesterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SemesterClient) UpdateOne(s *Semester) *SemesterUpdateOne {
	mutation := newSemesterMutation(c.config, OpUpdateOne, withSemester(s))
	return &SemesterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SemesterClient) UpdateOneID(id int) *SemesterUpdateOne {
	mutation := newSemesterMutation(c.config, OpUpdateOne, withSemesterID(id))
	return &SemesterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Semester.
func (c *SemesterClient) Delete() *SemesterDelete {
	mutation := newSemesterMutation(c.config, OpDelete)
	return &SemesterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SemesterClient) DeleteOne(s *Semester) *SemesterDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SemesterClient) DeleteOneID(id int) *SemesterDeleteOne {
	builder := c.Delete().Where(semester.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SemesterDeleteOne{builder}
}

// Create returns a query builder for Semester.
func (c *SemesterClient) Query() *SemesterQuery {
	return &SemesterQuery{config: c.config}
}

// Get returns a Semester entity by its id.
func (c *SemesterClient) Get(ctx context.Context, id int) (*Semester, error) {
	return c.Query().Where(semester.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SemesterClient) GetX(ctx context.Context, id int) *Semester {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QuerySemesterID queries the SemesterID edge of a Semester.
func (c *SemesterClient) QuerySemesterID(s *Semester) *ScholarshipQuery {
	query := &ScholarshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(semester.Table, semester.FieldID, id),
			sqlgraph.To(scholarship.Table, scholarship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, semester.SemesterIDTable, semester.SemesterIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SemesterClient) Hooks() []Hook {
	return c.hooks.Semester
}

// StudyplanClient is a client for the Studyplan schema.
type StudyplanClient struct {
	config
}

// NewStudyplanClient returns a client for the Studyplan from the given config.
func NewStudyplanClient(c config) *StudyplanClient {
	return &StudyplanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studyplan.Hooks(f(g(h())))`.
func (c *StudyplanClient) Use(hooks ...Hook) {
	c.hooks.Studyplan = append(c.hooks.Studyplan, hooks...)
}

// Create returns a create builder for Studyplan.
func (c *StudyplanClient) Create() *StudyplanCreate {
	mutation := newStudyplanMutation(c.config, OpCreate)
	return &StudyplanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Studyplan.
func (c *StudyplanClient) Update() *StudyplanUpdate {
	mutation := newStudyplanMutation(c.config, OpUpdate)
	return &StudyplanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudyplanClient) UpdateOne(s *Studyplan) *StudyplanUpdateOne {
	mutation := newStudyplanMutation(c.config, OpUpdateOne, withStudyplan(s))
	return &StudyplanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudyplanClient) UpdateOneID(id int) *StudyplanUpdateOne {
	mutation := newStudyplanMutation(c.config, OpUpdateOne, withStudyplanID(id))
	return &StudyplanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Studyplan.
func (c *StudyplanClient) Delete() *StudyplanDelete {
	mutation := newStudyplanMutation(c.config, OpDelete)
	return &StudyplanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StudyplanClient) DeleteOne(s *Studyplan) *StudyplanDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StudyplanClient) DeleteOneID(id int) *StudyplanDeleteOne {
	builder := c.Delete().Where(studyplan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudyplanDeleteOne{builder}
}

// Create returns a query builder for Studyplan.
func (c *StudyplanClient) Query() *StudyplanQuery {
	return &StudyplanQuery{config: c.config}
}

// Get returns a Studyplan entity by its id.
func (c *StudyplanClient) Get(ctx context.Context, id int) (*Studyplan, error) {
	return c.Query().Where(studyplan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudyplanClient) GetX(ctx context.Context, id int) *Studyplan {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryStudyplanID queries the StudyplanID edge of a Studyplan.
func (c *StudyplanClient) QueryStudyplanID(s *Studyplan) *ScholarshipQuery {
	query := &ScholarshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studyplan.Table, studyplan.FieldID, id),
			sqlgraph.To(scholarship.Table, scholarship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, studyplan.StudyplanIDTable, studyplan.StudyplanIDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudyplanClient) Hooks() []Hook {
	return c.hooks.Studyplan
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryUserID queries the UserID edge of a User.
func (c *UserClient) QueryUserID(u *User) *ScholarshipQuery {
	query := &ScholarshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(scholarship.Table, scholarship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserIDTable, user.UserIDColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
