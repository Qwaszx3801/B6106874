// Code generated by entc, DO NOT EDIT.

package scholarship

import (
	"github.com/Varissara/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Schlolarshipname applies equality check predicate on the "Schlolarshipname" field. It's identical to SchlolarshipnameEQ.
func Schlolarshipname(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchlolarshipname), v))
	})
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganization), v))
	})
}

// SchlolarshipnameEQ applies the EQ predicate on the "Schlolarshipname" field.
func SchlolarshipnameEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameNEQ applies the NEQ predicate on the "Schlolarshipname" field.
func SchlolarshipnameNEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameIn applies the In predicate on the "Schlolarshipname" field.
func SchlolarshipnameIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSchlolarshipname), v...))
	})
}

// SchlolarshipnameNotIn applies the NotIn predicate on the "Schlolarshipname" field.
func SchlolarshipnameNotIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSchlolarshipname), v...))
	})
}

// SchlolarshipnameGT applies the GT predicate on the "Schlolarshipname" field.
func SchlolarshipnameGT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameGTE applies the GTE predicate on the "Schlolarshipname" field.
func SchlolarshipnameGTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameLT applies the LT predicate on the "Schlolarshipname" field.
func SchlolarshipnameLT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameLTE applies the LTE predicate on the "Schlolarshipname" field.
func SchlolarshipnameLTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameContains applies the Contains predicate on the "Schlolarshipname" field.
func SchlolarshipnameContains(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameHasPrefix applies the HasPrefix predicate on the "Schlolarshipname" field.
func SchlolarshipnameHasPrefix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameHasSuffix applies the HasSuffix predicate on the "Schlolarshipname" field.
func SchlolarshipnameHasSuffix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameEqualFold applies the EqualFold predicate on the "Schlolarshipname" field.
func SchlolarshipnameEqualFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSchlolarshipname), v))
	})
}

// SchlolarshipnameContainsFold applies the ContainsFold predicate on the "Schlolarshipname" field.
func SchlolarshipnameContainsFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSchlolarshipname), v))
	})
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganization), v))
	})
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrganization), v))
	})
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrganization), v...))
	})
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrganization), v...))
	})
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrganization), v))
	})
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrganization), v))
	})
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrganization), v))
	})
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrganization), v))
	})
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrganization), v))
	})
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrganization), v))
	})
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrganization), v))
	})
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrganization), v))
	})
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrganization), v))
	})
}

// HasScholarshiptypeID applies the HasEdge predicate on the "ScholarshiptypeID" edge.
func HasScholarshiptypeID() predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScholarshiptypeIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScholarshiptypeIDTable, ScholarshiptypeIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScholarshiptypeIDWith applies the HasEdge predicate on the "ScholarshiptypeID" edge with a given conditions (other predicates).
func HasScholarshiptypeIDWith(preds ...predicate.Scholarshiptype) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScholarshiptypeIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScholarshiptypeIDTable, ScholarshiptypeIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEducationlevelID applies the HasEdge predicate on the "EducationlevelID" edge.
func HasEducationlevelID() predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EducationlevelIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EducationlevelIDTable, EducationlevelIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEducationlevelIDWith applies the HasEdge predicate on the "EducationlevelID" edge with a given conditions (other predicates).
func HasEducationlevelIDWith(preds ...predicate.Educationlevel) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EducationlevelIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EducationlevelIDTable, EducationlevelIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStudyplanID applies the HasEdge predicate on the "StudyplanID" edge.
func HasStudyplanID() predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudyplanIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudyplanIDTable, StudyplanIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudyplanIDWith applies the HasEdge predicate on the "StudyplanID" edge with a given conditions (other predicates).
func HasStudyplanIDWith(preds ...predicate.Studyplan) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudyplanIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudyplanIDTable, StudyplanIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSemesterID applies the HasEdge predicate on the "SemesterID" edge.
func HasSemesterID() predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SemesterIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SemesterIDTable, SemesterIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSemesterIDWith applies the HasEdge predicate on the "SemesterID" edge with a given conditions (other predicates).
func HasSemesterIDWith(preds ...predicate.Semester) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SemesterIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SemesterIDTable, SemesterIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserID applies the HasEdge predicate on the "UserID" edge.
func HasUserID() predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserIDTable, UserIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserIDWith applies the HasEdge predicate on the "UserID" edge with a given conditions (other predicates).
func HasUserIDWith(preds ...predicate.User) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserIDTable, UserIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Scholarship) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Scholarship) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Scholarship) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		p(s.Not())
	})
}
