// Code generated by entc, DO NOT EDIT.

package scholarship

const (
	// Label holds the string label denoting the scholarship type in the database.
	Label = "scholarship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSchlolarshipname holds the string denoting the schlolarshipname field in the database.
	FieldSchlolarshipname = "schlolarshipname"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"

	// EdgeScholarshiptypeID holds the string denoting the scholarshiptypeid edge name in mutations.
	EdgeScholarshiptypeID = "ScholarshiptypeID"
	// EdgeEducationlevelID holds the string denoting the educationlevelid edge name in mutations.
	EdgeEducationlevelID = "EducationlevelID"
	// EdgeStudyplanID holds the string denoting the studyplanid edge name in mutations.
	EdgeStudyplanID = "StudyplanID"
	// EdgeSemesterID holds the string denoting the semesterid edge name in mutations.
	EdgeSemesterID = "SemesterID"
	// EdgeUserID holds the string denoting the userid edge name in mutations.
	EdgeUserID = "UserID"

	// Table holds the table name of the scholarship in the database.
	Table = "scholarships"
	// ScholarshiptypeIDTable is the table the holds the ScholarshiptypeID relation/edge.
	ScholarshiptypeIDTable = "scholarships"
	// ScholarshiptypeIDInverseTable is the table name for the Scholarshiptype entity.
	// It exists in this package in order to avoid circular dependency with the "scholarshiptype" package.
	ScholarshiptypeIDInverseTable = "scholarshiptypes"
	// ScholarshiptypeIDColumn is the table column denoting the ScholarshiptypeID relation/edge.
	ScholarshiptypeIDColumn = "scholarshiptype_scholarshiptype_id"
	// EducationlevelIDTable is the table the holds the EducationlevelID relation/edge.
	EducationlevelIDTable = "scholarships"
	// EducationlevelIDInverseTable is the table name for the Educationlevel entity.
	// It exists in this package in order to avoid circular dependency with the "educationlevel" package.
	EducationlevelIDInverseTable = "educationlevels"
	// EducationlevelIDColumn is the table column denoting the EducationlevelID relation/edge.
	EducationlevelIDColumn = "educationlevel_educationlevel_id"
	// StudyplanIDTable is the table the holds the StudyplanID relation/edge.
	StudyplanIDTable = "scholarships"
	// StudyplanIDInverseTable is the table name for the Studyplan entity.
	// It exists in this package in order to avoid circular dependency with the "studyplan" package.
	StudyplanIDInverseTable = "studyplans"
	// StudyplanIDColumn is the table column denoting the StudyplanID relation/edge.
	StudyplanIDColumn = "studyplan_studyplan_id"
	// SemesterIDTable is the table the holds the SemesterID relation/edge.
	SemesterIDTable = "scholarships"
	// SemesterIDInverseTable is the table name for the Semester entity.
	// It exists in this package in order to avoid circular dependency with the "semester" package.
	SemesterIDInverseTable = "semesters"
	// SemesterIDColumn is the table column denoting the SemesterID relation/edge.
	SemesterIDColumn = "semester_semester_id"
	// UserIDTable is the table the holds the UserID relation/edge.
	UserIDTable = "scholarships"
	// UserIDInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserIDInverseTable = "users"
	// UserIDColumn is the table column denoting the UserID relation/edge.
	UserIDColumn = "user_user_id"
)

// Columns holds all SQL columns for scholarship fields.
var Columns = []string{
	FieldID,
	FieldSchlolarshipname,
	FieldOrganization,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Scholarship type.
var ForeignKeys = []string{
	"educationlevel_educationlevel_id",
	"scholarshiptype_scholarshiptype_id",
	"semester_semester_id",
	"studyplan_studyplan_id",
	"user_user_id",
}

var (
	// SchlolarshipnameValidator is a validator for the "Schlolarshipname" field. It is called by the builders before save.
	SchlolarshipnameValidator func(string) error
	// OrganizationValidator is a validator for the "organization" field. It is called by the builders before save.
	OrganizationValidator func(string) error
)
