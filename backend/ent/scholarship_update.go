// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Varissara/app/ent/educationlevel"
	"github.com/Varissara/app/ent/predicate"
	"github.com/Varissara/app/ent/scholarship"
	"github.com/Varissara/app/ent/scholarshiptype"
	"github.com/Varissara/app/ent/semester"
	"github.com/Varissara/app/ent/studyplan"
	"github.com/Varissara/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ScholarshipUpdate is the builder for updating Scholarship entities.
type ScholarshipUpdate struct {
	config
	hooks      []Hook
	mutation   *ScholarshipMutation
	predicates []predicate.Scholarship
}

// Where adds a new predicate for the builder.
func (su *ScholarshipUpdate) Where(ps ...predicate.Scholarship) *ScholarshipUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetSchlolarshipname sets the Schlolarshipname field.
func (su *ScholarshipUpdate) SetSchlolarshipname(s string) *ScholarshipUpdate {
	su.mutation.SetSchlolarshipname(s)
	return su
}

// SetOrganization sets the organization field.
func (su *ScholarshipUpdate) SetOrganization(s string) *ScholarshipUpdate {
	su.mutation.SetOrganization(s)
	return su
}

// SetScholarshiptypeIDID sets the ScholarshiptypeID edge to Scholarshiptype by id.
func (su *ScholarshipUpdate) SetScholarshiptypeIDID(id int) *ScholarshipUpdate {
	su.mutation.SetScholarshiptypeIDID(id)
	return su
}

// SetNillableScholarshiptypeIDID sets the ScholarshiptypeID edge to Scholarshiptype by id if the given value is not nil.
func (su *ScholarshipUpdate) SetNillableScholarshiptypeIDID(id *int) *ScholarshipUpdate {
	if id != nil {
		su = su.SetScholarshiptypeIDID(*id)
	}
	return su
}

// SetScholarshiptypeID sets the ScholarshiptypeID edge to Scholarshiptype.
func (su *ScholarshipUpdate) SetScholarshiptypeID(s *Scholarshiptype) *ScholarshipUpdate {
	return su.SetScholarshiptypeIDID(s.ID)
}

// SetEducationlevelIDID sets the EducationlevelID edge to Educationlevel by id.
func (su *ScholarshipUpdate) SetEducationlevelIDID(id int) *ScholarshipUpdate {
	su.mutation.SetEducationlevelIDID(id)
	return su
}

// SetNillableEducationlevelIDID sets the EducationlevelID edge to Educationlevel by id if the given value is not nil.
func (su *ScholarshipUpdate) SetNillableEducationlevelIDID(id *int) *ScholarshipUpdate {
	if id != nil {
		su = su.SetEducationlevelIDID(*id)
	}
	return su
}

// SetEducationlevelID sets the EducationlevelID edge to Educationlevel.
func (su *ScholarshipUpdate) SetEducationlevelID(e *Educationlevel) *ScholarshipUpdate {
	return su.SetEducationlevelIDID(e.ID)
}

// SetStudyplanIDID sets the StudyplanID edge to Studyplan by id.
func (su *ScholarshipUpdate) SetStudyplanIDID(id int) *ScholarshipUpdate {
	su.mutation.SetStudyplanIDID(id)
	return su
}

// SetNillableStudyplanIDID sets the StudyplanID edge to Studyplan by id if the given value is not nil.
func (su *ScholarshipUpdate) SetNillableStudyplanIDID(id *int) *ScholarshipUpdate {
	if id != nil {
		su = su.SetStudyplanIDID(*id)
	}
	return su
}

// SetStudyplanID sets the StudyplanID edge to Studyplan.
func (su *ScholarshipUpdate) SetStudyplanID(s *Studyplan) *ScholarshipUpdate {
	return su.SetStudyplanIDID(s.ID)
}

// SetSemesterIDID sets the SemesterID edge to Semester by id.
func (su *ScholarshipUpdate) SetSemesterIDID(id int) *ScholarshipUpdate {
	su.mutation.SetSemesterIDID(id)
	return su
}

// SetNillableSemesterIDID sets the SemesterID edge to Semester by id if the given value is not nil.
func (su *ScholarshipUpdate) SetNillableSemesterIDID(id *int) *ScholarshipUpdate {
	if id != nil {
		su = su.SetSemesterIDID(*id)
	}
	return su
}

// SetSemesterID sets the SemesterID edge to Semester.
func (su *ScholarshipUpdate) SetSemesterID(s *Semester) *ScholarshipUpdate {
	return su.SetSemesterIDID(s.ID)
}

// SetUserIDID sets the UserID edge to User by id.
func (su *ScholarshipUpdate) SetUserIDID(id int) *ScholarshipUpdate {
	su.mutation.SetUserIDID(id)
	return su
}

// SetNillableUserIDID sets the UserID edge to User by id if the given value is not nil.
func (su *ScholarshipUpdate) SetNillableUserIDID(id *int) *ScholarshipUpdate {
	if id != nil {
		su = su.SetUserIDID(*id)
	}
	return su
}

// SetUserID sets the UserID edge to User.
func (su *ScholarshipUpdate) SetUserID(u *User) *ScholarshipUpdate {
	return su.SetUserIDID(u.ID)
}

// Mutation returns the ScholarshipMutation object of the builder.
func (su *ScholarshipUpdate) Mutation() *ScholarshipMutation {
	return su.mutation
}

// ClearScholarshiptypeID clears the ScholarshiptypeID edge to Scholarshiptype.
func (su *ScholarshipUpdate) ClearScholarshiptypeID() *ScholarshipUpdate {
	su.mutation.ClearScholarshiptypeID()
	return su
}

// ClearEducationlevelID clears the EducationlevelID edge to Educationlevel.
func (su *ScholarshipUpdate) ClearEducationlevelID() *ScholarshipUpdate {
	su.mutation.ClearEducationlevelID()
	return su
}

// ClearStudyplanID clears the StudyplanID edge to Studyplan.
func (su *ScholarshipUpdate) ClearStudyplanID() *ScholarshipUpdate {
	su.mutation.ClearStudyplanID()
	return su
}

// ClearSemesterID clears the SemesterID edge to Semester.
func (su *ScholarshipUpdate) ClearSemesterID() *ScholarshipUpdate {
	su.mutation.ClearSemesterID()
	return su
}

// ClearUserID clears the UserID edge to User.
func (su *ScholarshipUpdate) ClearUserID() *ScholarshipUpdate {
	su.mutation.ClearUserID()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ScholarshipUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Schlolarshipname(); ok {
		if err := scholarship.SchlolarshipnameValidator(v); err != nil {
			return 0, &ValidationError{Name: "Schlolarshipname", err: fmt.Errorf("ent: validator failed for field \"Schlolarshipname\": %w", err)}
		}
	}
	if v, ok := su.mutation.Organization(); ok {
		if err := scholarship.OrganizationValidator(v); err != nil {
			return 0, &ValidationError{Name: "organization", err: fmt.Errorf("ent: validator failed for field \"organization\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScholarshipUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScholarshipUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScholarshipUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScholarshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarship.Table,
			Columns: scholarship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarship.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Schlolarshipname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldSchlolarshipname,
		})
	}
	if value, ok := su.mutation.Organization(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldOrganization,
		})
	}
	if su.mutation.ScholarshiptypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.ScholarshiptypeIDTable,
			Columns: []string{scholarship.ScholarshiptypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ScholarshiptypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.ScholarshiptypeIDTable,
			Columns: []string{scholarship.ScholarshiptypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EducationlevelIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.EducationlevelIDTable,
			Columns: []string{scholarship.EducationlevelIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EducationlevelIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.EducationlevelIDTable,
			Columns: []string{scholarship.EducationlevelIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudyplanIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.StudyplanIDTable,
			Columns: []string{scholarship.StudyplanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: studyplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudyplanIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.StudyplanIDTable,
			Columns: []string{scholarship.StudyplanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: studyplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SemesterIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.SemesterIDTable,
			Columns: []string{scholarship.SemesterIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SemesterIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.SemesterIDTable,
			Columns: []string{scholarship.SemesterIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.UserIDTable,
			Columns: []string{scholarship.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.UserIDTable,
			Columns: []string{scholarship.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ScholarshipUpdateOne is the builder for updating a single Scholarship entity.
type ScholarshipUpdateOne struct {
	config
	hooks    []Hook
	mutation *ScholarshipMutation
}

// SetSchlolarshipname sets the Schlolarshipname field.
func (suo *ScholarshipUpdateOne) SetSchlolarshipname(s string) *ScholarshipUpdateOne {
	suo.mutation.SetSchlolarshipname(s)
	return suo
}

// SetOrganization sets the organization field.
func (suo *ScholarshipUpdateOne) SetOrganization(s string) *ScholarshipUpdateOne {
	suo.mutation.SetOrganization(s)
	return suo
}

// SetScholarshiptypeIDID sets the ScholarshiptypeID edge to Scholarshiptype by id.
func (suo *ScholarshipUpdateOne) SetScholarshiptypeIDID(id int) *ScholarshipUpdateOne {
	suo.mutation.SetScholarshiptypeIDID(id)
	return suo
}

// SetNillableScholarshiptypeIDID sets the ScholarshiptypeID edge to Scholarshiptype by id if the given value is not nil.
func (suo *ScholarshipUpdateOne) SetNillableScholarshiptypeIDID(id *int) *ScholarshipUpdateOne {
	if id != nil {
		suo = suo.SetScholarshiptypeIDID(*id)
	}
	return suo
}

// SetScholarshiptypeID sets the ScholarshiptypeID edge to Scholarshiptype.
func (suo *ScholarshipUpdateOne) SetScholarshiptypeID(s *Scholarshiptype) *ScholarshipUpdateOne {
	return suo.SetScholarshiptypeIDID(s.ID)
}

// SetEducationlevelIDID sets the EducationlevelID edge to Educationlevel by id.
func (suo *ScholarshipUpdateOne) SetEducationlevelIDID(id int) *ScholarshipUpdateOne {
	suo.mutation.SetEducationlevelIDID(id)
	return suo
}

// SetNillableEducationlevelIDID sets the EducationlevelID edge to Educationlevel by id if the given value is not nil.
func (suo *ScholarshipUpdateOne) SetNillableEducationlevelIDID(id *int) *ScholarshipUpdateOne {
	if id != nil {
		suo = suo.SetEducationlevelIDID(*id)
	}
	return suo
}

// SetEducationlevelID sets the EducationlevelID edge to Educationlevel.
func (suo *ScholarshipUpdateOne) SetEducationlevelID(e *Educationlevel) *ScholarshipUpdateOne {
	return suo.SetEducationlevelIDID(e.ID)
}

// SetStudyplanIDID sets the StudyplanID edge to Studyplan by id.
func (suo *ScholarshipUpdateOne) SetStudyplanIDID(id int) *ScholarshipUpdateOne {
	suo.mutation.SetStudyplanIDID(id)
	return suo
}

// SetNillableStudyplanIDID sets the StudyplanID edge to Studyplan by id if the given value is not nil.
func (suo *ScholarshipUpdateOne) SetNillableStudyplanIDID(id *int) *ScholarshipUpdateOne {
	if id != nil {
		suo = suo.SetStudyplanIDID(*id)
	}
	return suo
}

// SetStudyplanID sets the StudyplanID edge to Studyplan.
func (suo *ScholarshipUpdateOne) SetStudyplanID(s *Studyplan) *ScholarshipUpdateOne {
	return suo.SetStudyplanIDID(s.ID)
}

// SetSemesterIDID sets the SemesterID edge to Semester by id.
func (suo *ScholarshipUpdateOne) SetSemesterIDID(id int) *ScholarshipUpdateOne {
	suo.mutation.SetSemesterIDID(id)
	return suo
}

// SetNillableSemesterIDID sets the SemesterID edge to Semester by id if the given value is not nil.
func (suo *ScholarshipUpdateOne) SetNillableSemesterIDID(id *int) *ScholarshipUpdateOne {
	if id != nil {
		suo = suo.SetSemesterIDID(*id)
	}
	return suo
}

// SetSemesterID sets the SemesterID edge to Semester.
func (suo *ScholarshipUpdateOne) SetSemesterID(s *Semester) *ScholarshipUpdateOne {
	return suo.SetSemesterIDID(s.ID)
}

// SetUserIDID sets the UserID edge to User by id.
func (suo *ScholarshipUpdateOne) SetUserIDID(id int) *ScholarshipUpdateOne {
	suo.mutation.SetUserIDID(id)
	return suo
}

// SetNillableUserIDID sets the UserID edge to User by id if the given value is not nil.
func (suo *ScholarshipUpdateOne) SetNillableUserIDID(id *int) *ScholarshipUpdateOne {
	if id != nil {
		suo = suo.SetUserIDID(*id)
	}
	return suo
}

// SetUserID sets the UserID edge to User.
func (suo *ScholarshipUpdateOne) SetUserID(u *User) *ScholarshipUpdateOne {
	return suo.SetUserIDID(u.ID)
}

// Mutation returns the ScholarshipMutation object of the builder.
func (suo *ScholarshipUpdateOne) Mutation() *ScholarshipMutation {
	return suo.mutation
}

// ClearScholarshiptypeID clears the ScholarshiptypeID edge to Scholarshiptype.
func (suo *ScholarshipUpdateOne) ClearScholarshiptypeID() *ScholarshipUpdateOne {
	suo.mutation.ClearScholarshiptypeID()
	return suo
}

// ClearEducationlevelID clears the EducationlevelID edge to Educationlevel.
func (suo *ScholarshipUpdateOne) ClearEducationlevelID() *ScholarshipUpdateOne {
	suo.mutation.ClearEducationlevelID()
	return suo
}

// ClearStudyplanID clears the StudyplanID edge to Studyplan.
func (suo *ScholarshipUpdateOne) ClearStudyplanID() *ScholarshipUpdateOne {
	suo.mutation.ClearStudyplanID()
	return suo
}

// ClearSemesterID clears the SemesterID edge to Semester.
func (suo *ScholarshipUpdateOne) ClearSemesterID() *ScholarshipUpdateOne {
	suo.mutation.ClearSemesterID()
	return suo
}

// ClearUserID clears the UserID edge to User.
func (suo *ScholarshipUpdateOne) ClearUserID() *ScholarshipUpdateOne {
	suo.mutation.ClearUserID()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *ScholarshipUpdateOne) Save(ctx context.Context) (*Scholarship, error) {
	if v, ok := suo.mutation.Schlolarshipname(); ok {
		if err := scholarship.SchlolarshipnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Schlolarshipname", err: fmt.Errorf("ent: validator failed for field \"Schlolarshipname\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Organization(); ok {
		if err := scholarship.OrganizationValidator(v); err != nil {
			return nil, &ValidationError{Name: "organization", err: fmt.Errorf("ent: validator failed for field \"organization\": %w", err)}
		}
	}

	var (
		err  error
		node *Scholarship
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScholarshipUpdateOne) SaveX(ctx context.Context) *Scholarship {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *ScholarshipUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScholarshipUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScholarshipUpdateOne) sqlSave(ctx context.Context) (s *Scholarship, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarship.Table,
			Columns: scholarship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarship.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Scholarship.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Schlolarshipname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldSchlolarshipname,
		})
	}
	if value, ok := suo.mutation.Organization(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldOrganization,
		})
	}
	if suo.mutation.ScholarshiptypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.ScholarshiptypeIDTable,
			Columns: []string{scholarship.ScholarshiptypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ScholarshiptypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.ScholarshiptypeIDTable,
			Columns: []string{scholarship.ScholarshiptypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarshiptype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EducationlevelIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.EducationlevelIDTable,
			Columns: []string{scholarship.EducationlevelIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EducationlevelIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.EducationlevelIDTable,
			Columns: []string{scholarship.EducationlevelIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: educationlevel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudyplanIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.StudyplanIDTable,
			Columns: []string{scholarship.StudyplanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: studyplan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudyplanIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.StudyplanIDTable,
			Columns: []string{scholarship.StudyplanIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: studyplan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SemesterIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.SemesterIDTable,
			Columns: []string{scholarship.SemesterIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SemesterIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.SemesterIDTable,
			Columns: []string{scholarship.SemesterIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: semester.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.UserIDTable,
			Columns: []string{scholarship.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scholarship.UserIDTable,
			Columns: []string{scholarship.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Scholarship{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarship.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
