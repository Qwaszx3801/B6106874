// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Varissara/app/ent/educationlevel"
	"github.com/Varissara/app/ent/scholarship"
	"github.com/Varissara/app/ent/scholarshiptype"
	"github.com/Varissara/app/ent/semester"
	"github.com/Varissara/app/ent/studyplan"
	"github.com/Varissara/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Scholarship is the model entity for the Scholarship schema.
type Scholarship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Schlolarshipname holds the value of the "Schlolarshipname" field.
	Schlolarshipname string `json:"Schlolarshipname,omitempty"`
	// Organization holds the value of the "organization" field.
	Organization string `json:"organization,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScholarshipQuery when eager-loading is set.
	Edges                              ScholarshipEdges `json:"edges"`
	educationlevel_educationlevel_id   *int
	scholarshiptype_scholarshiptype_id *int
	semester_semester_id               *int
	studyplan_studyplan_id             *int
	user_user_id                       *int
}

// ScholarshipEdges holds the relations/edges for other nodes in the graph.
type ScholarshipEdges struct {
	// ScholarshiptypeID holds the value of the ScholarshiptypeID edge.
	ScholarshiptypeID *Scholarshiptype
	// EducationlevelID holds the value of the EducationlevelID edge.
	EducationlevelID *Educationlevel
	// StudyplanID holds the value of the StudyplanID edge.
	StudyplanID *Studyplan
	// SemesterID holds the value of the SemesterID edge.
	SemesterID *Semester
	// UserID holds the value of the UserID edge.
	UserID *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ScholarshiptypeIDOrErr returns the ScholarshiptypeID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipEdges) ScholarshiptypeIDOrErr() (*Scholarshiptype, error) {
	if e.loadedTypes[0] {
		if e.ScholarshiptypeID == nil {
			// The edge ScholarshiptypeID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: scholarshiptype.Label}
		}
		return e.ScholarshiptypeID, nil
	}
	return nil, &NotLoadedError{edge: "ScholarshiptypeID"}
}

// EducationlevelIDOrErr returns the EducationlevelID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipEdges) EducationlevelIDOrErr() (*Educationlevel, error) {
	if e.loadedTypes[1] {
		if e.EducationlevelID == nil {
			// The edge EducationlevelID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: educationlevel.Label}
		}
		return e.EducationlevelID, nil
	}
	return nil, &NotLoadedError{edge: "EducationlevelID"}
}

// StudyplanIDOrErr returns the StudyplanID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipEdges) StudyplanIDOrErr() (*Studyplan, error) {
	if e.loadedTypes[2] {
		if e.StudyplanID == nil {
			// The edge StudyplanID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: studyplan.Label}
		}
		return e.StudyplanID, nil
	}
	return nil, &NotLoadedError{edge: "StudyplanID"}
}

// SemesterIDOrErr returns the SemesterID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipEdges) SemesterIDOrErr() (*Semester, error) {
	if e.loadedTypes[3] {
		if e.SemesterID == nil {
			// The edge SemesterID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: semester.Label}
		}
		return e.SemesterID, nil
	}
	return nil, &NotLoadedError{edge: "SemesterID"}
}

// UserIDOrErr returns the UserID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScholarshipEdges) UserIDOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.UserID == nil {
			// The edge UserID was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserID, nil
	}
	return nil, &NotLoadedError{edge: "UserID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scholarship) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Schlolarshipname
		&sql.NullString{}, // organization
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Scholarship) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // educationlevel_educationlevel_id
		&sql.NullInt64{}, // scholarshiptype_scholarshiptype_id
		&sql.NullInt64{}, // semester_semester_id
		&sql.NullInt64{}, // studyplan_studyplan_id
		&sql.NullInt64{}, // user_user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scholarship fields.
func (s *Scholarship) assignValues(values ...interface{}) error {
	if m, n := len(values), len(scholarship.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Schlolarshipname", values[0])
	} else if value.Valid {
		s.Schlolarshipname = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field organization", values[1])
	} else if value.Valid {
		s.Organization = value.String
	}
	values = values[2:]
	if len(values) == len(scholarship.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field educationlevel_educationlevel_id", value)
		} else if value.Valid {
			s.educationlevel_educationlevel_id = new(int)
			*s.educationlevel_educationlevel_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field scholarshiptype_scholarshiptype_id", value)
		} else if value.Valid {
			s.scholarshiptype_scholarshiptype_id = new(int)
			*s.scholarshiptype_scholarshiptype_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field semester_semester_id", value)
		} else if value.Valid {
			s.semester_semester_id = new(int)
			*s.semester_semester_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field studyplan_studyplan_id", value)
		} else if value.Valid {
			s.studyplan_studyplan_id = new(int)
			*s.studyplan_studyplan_id = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_user_id", value)
		} else if value.Valid {
			s.user_user_id = new(int)
			*s.user_user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryScholarshiptypeID queries the ScholarshiptypeID edge of the Scholarship.
func (s *Scholarship) QueryScholarshiptypeID() *ScholarshiptypeQuery {
	return (&ScholarshipClient{config: s.config}).QueryScholarshiptypeID(s)
}

// QueryEducationlevelID queries the EducationlevelID edge of the Scholarship.
func (s *Scholarship) QueryEducationlevelID() *EducationlevelQuery {
	return (&ScholarshipClient{config: s.config}).QueryEducationlevelID(s)
}

// QueryStudyplanID queries the StudyplanID edge of the Scholarship.
func (s *Scholarship) QueryStudyplanID() *StudyplanQuery {
	return (&ScholarshipClient{config: s.config}).QueryStudyplanID(s)
}

// QuerySemesterID queries the SemesterID edge of the Scholarship.
func (s *Scholarship) QuerySemesterID() *SemesterQuery {
	return (&ScholarshipClient{config: s.config}).QuerySemesterID(s)
}

// QueryUserID queries the UserID edge of the Scholarship.
func (s *Scholarship) QueryUserID() *UserQuery {
	return (&ScholarshipClient{config: s.config}).QueryUserID(s)
}

// Update returns a builder for updating this Scholarship.
// Note that, you need to call Scholarship.Unwrap() before calling this method, if this Scholarship
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scholarship) Update() *ScholarshipUpdateOne {
	return (&ScholarshipClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Scholarship) Unwrap() *Scholarship {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scholarship is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scholarship) String() string {
	var builder strings.Builder
	builder.WriteString("Scholarship(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", Schlolarshipname=")
	builder.WriteString(s.Schlolarshipname)
	builder.WriteString(", organization=")
	builder.WriteString(s.Organization)
	builder.WriteByte(')')
	return builder.String()
}

// Scholarships is a parsable slice of Scholarship.
type Scholarships []*Scholarship

func (s Scholarships) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
