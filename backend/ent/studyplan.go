// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Varissara/app/ent/studyplan"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Studyplan is the model entity for the Studyplan schema.
type Studyplan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Studyplanname holds the value of the "Studyplanname" field.
	Studyplanname string `json:"Studyplanname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudyplanQuery when eager-loading is set.
	Edges StudyplanEdges `json:"edges"`
}

// StudyplanEdges holds the relations/edges for other nodes in the graph.
type StudyplanEdges struct {
	// StudyplanID holds the value of the StudyplanID edge.
	StudyplanID []*Scholarship
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StudyplanIDOrErr returns the StudyplanID value or an error if the edge
// was not loaded in eager-loading.
func (e StudyplanEdges) StudyplanIDOrErr() ([]*Scholarship, error) {
	if e.loadedTypes[0] {
		return e.StudyplanID, nil
	}
	return nil, &NotLoadedError{edge: "StudyplanID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Studyplan) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Studyplanname
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Studyplan fields.
func (s *Studyplan) assignValues(values ...interface{}) error {
	if m, n := len(values), len(studyplan.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Studyplanname", values[0])
	} else if value.Valid {
		s.Studyplanname = value.String
	}
	return nil
}

// QueryStudyplanID queries the StudyplanID edge of the Studyplan.
func (s *Studyplan) QueryStudyplanID() *ScholarshipQuery {
	return (&StudyplanClient{config: s.config}).QueryStudyplanID(s)
}

// Update returns a builder for updating this Studyplan.
// Note that, you need to call Studyplan.Unwrap() before calling this method, if this Studyplan
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Studyplan) Update() *StudyplanUpdateOne {
	return (&StudyplanClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Studyplan) Unwrap() *Studyplan {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Studyplan is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Studyplan) String() string {
	var builder strings.Builder
	builder.WriteString("Studyplan(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", Studyplanname=")
	builder.WriteString(s.Studyplanname)
	builder.WriteByte(')')
	return builder.String()
}

// Studyplans is a parsable slice of Studyplan.
type Studyplans []*Studyplan

func (s Studyplans) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
